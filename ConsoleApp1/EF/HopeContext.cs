// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Hope.Data
{
    public partial class HopeContext : DbContext
    {
        public HopeContext()
        {
        }

        public HopeContext(DbContextOptions<HopeContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Action> Actions { get; set; }
        public virtual DbSet<AlarmTalkTemplate> AlarmTalkTemplates { get; set; }
        public virtual DbSet<Assignment> Assignments { get; set; }
        public virtual DbSet<AssignmentGrade> AssignmentGrades { get; set; }
        public virtual DbSet<AssignmentReservation> AssignmentReservations { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<Audit> Audits { get; set; }
        public virtual DbSet<CallHistory> CallHistories { get; set; }
        public virtual DbSet<Center> Centers { get; set; }
        public virtual DbSet<CenterDepartment> CenterDepartments { get; set; }
        public virtual DbSet<Chat> Chats { get; set; }
        public virtual DbSet<Code> Codes { get; set; }
        public virtual DbSet<CodeCategory> CodeCategories { get; set; }
        public virtual DbSet<CodeEx> CodeExes { get; set; }
        public virtual DbSet<ColumnInfo> ColumnInfos { get; set; }
        public virtual DbSet<Consult> Consults { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerFile> CustomerFiles { get; set; }
        public virtual DbSet<CustomerHiddenness> CustomerHiddennesses { get; set; }
        public virtual DbSet<CustomerMemo> CustomerMemos { get; set; }
        public virtual DbSet<CustomerMigration> CustomerMigrations { get; set; }
        public virtual DbSet<CustomerPass> CustomerPasses { get; set; }
        public virtual DbSet<CustomerPermission> CustomerPermissions { get; set; }
        public virtual DbSet<CustomerTag> CustomerTags { get; set; }
        public virtual DbSet<DaemonJob> DaemonJobs { get; set; }
        public virtual DbSet<Debt> Debts { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentVersion> DocumentVersions { get; set; }
        public virtual DbSet<EntityLog> EntityLogs { get; set; }
        public virtual DbSet<Favorate> Favorates { get; set; }
        public virtual DbSet<Folder> Folders { get; set; }
        public virtual DbSet<GenericLog> GenericLogs { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<Home> Homes { get; set; }
        public virtual DbSet<Income> Incomes { get; set; }
        public virtual DbSet<Memo> Memos { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<OnlineRequest> OnlineRequests { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<ProductProgress> ProductProgresses { get; set; }
        public virtual DbSet<PushCallRecording> PushCallRecordings { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<ServerSetting> ServerSettings { get; set; }
        public virtual DbSet<Storage> Storages { get; set; }
        public virtual DbSet<Support> Supports { get; set; }
        public virtual DbSet<Timer> Timers { get; set; }
        public virtual DbSet<UsbKeyLog> UsbKeyLogs { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserEx> UserExes { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<Work> Works { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=.,3433;Initial Catalog=Hope_dev;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Action>(entity =>
            {
                entity.ToTable("Action");

                entity.Property(e => e.ActionId)
                    .ValueGeneratedNever()
                    .HasComment("기능 아이디");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasDefaultValueSql("(N'')")
                    .HasComment("메모");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("기능 이름");
            });

            modelBuilder.Entity<AlarmTalkTemplate>(entity =>
            {
                entity.HasKey(e => e.TemplateCode);

                entity.ToTable("AlarmTalkTemplate");

                entity.Property(e => e.TemplateCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("세종텔레콤에 템플릿 등록하여 할당받은 코드");

                entity.Property(e => e.ButtonName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("템플릿에 포함된 버튼에 표시되는 버튼이름");

                entity.Property(e => e.ButtonUrl)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("버튼에 포함되는 URL 주소, 총 길이 200자 제한있음");

                entity.Property(e => e.Contents)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("고객에게 발송되는 템플릿 내용 (카카오 검수 필요)");

                entity.Property(e => e.Enabled).HasComment("1이면 HOPE에서 선택가능하게 표시되고 0이면 표시되지 않음");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("메모");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("템플릿 이름, 세종텔레콤 등록 이름과 동일할 필요는 없음");
            });

            modelBuilder.Entity<Assignment>(entity =>
            {
                entity.HasKey(e => new { e.AssignedOn, e.CustomerId });

                entity.ToTable("Assignment");

                entity.HasIndex(e => e.CustomerId, "IX_Assignment_CustomerId");

                entity.HasIndex(e => e.UserId, "IX_Assignment_UserId");

                entity.Property(e => e.AssignedOn)
                    .HasColumnType("smalldatetime")
                    .HasComment("배정일");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')")
                    .HasComment("처리 메모");

                entity.Property(e => e.OriginalNextContactDate)
                    .HasColumnType("smalldatetime")
                    .HasComment("배정시 배정 예정일");

                entity.Property(e => e.PickedAt)
                    .HasColumnType("smalldatetime")
                    .HasComment("배정 확인 일시");

                entity.Property(e => e.ReservationMemo)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')")
                    .HasComment("예약 메모");

                entity.Property(e => e.StatusChangedAt)
                    .HasColumnType("smalldatetime")
                    .HasComment("처리상태 변경 일시");

                entity.Property(e => e.StatusCode).HasComment("[58] 처리상태");

                entity.Property(e => e.TypeCode)
                    .HasDefaultValueSql("((800000))")
                    .HasComment("[80] 배정 유형");

                entity.Property(e => e.UserId).HasComment("");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Assignments)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Assignment_Customer");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Assignments)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Assignment_User");
            });

            modelBuilder.Entity<AssignmentGrade>(entity =>
            {
                entity.HasKey(e => e.CustomerGradeCode);

                entity.ToTable("AssignmentGrade");

                entity.Property(e => e.CustomerGradeCode)
                    .ValueGeneratedNever()
                    .HasComment("[59] 고객 등급");
            });

            modelBuilder.Entity<AssignmentReservation>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.AssigningOn });

                entity.ToTable("AssignmentReservation");

                entity.HasComment("배정 예약");

                entity.Property(e => e.AssigningOn)
                    .HasColumnType("smalldatetime")
                    .HasComment("예약일");

                entity.Property(e => e.ReservationMemo)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')")
                    .HasComment("예약 메모");

                entity.Property(e => e.UserId).HasComment("");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.AssignmentReservations)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_AssignmentReservation_Customer");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AssignmentReservations)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AssignmentReservation_User");
            });

            modelBuilder.Entity<Attendance>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.UserId });

                entity.ToTable("Attendance");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasDefaultValueSql("('')")
                    .HasComment("출결 일자");

                entity.Property(e => e.UserId).HasComment("직원코드");

                entity.Property(e => e.AttributeCode).HasComment("[5] 결근 특기");

                entity.Property(e => e.IsLate).HasComment("지각");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')")
                    .HasComment("특이사항");

                entity.Property(e => e.StatusCode).HasComment("[4] 출근 상태");

                entity.Property(e => e.WorkDay)
                    .HasColumnType("numeric(9, 1)")
                    .HasComment("CM근무일(콜)");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Attendances)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Attendance_Member");
            });

            modelBuilder.Entity<Audit>(entity =>
            {
                entity.HasKey(e => e.ConsultAuditId);

                entity.ToTable("Audit");

                entity.HasIndex(e => e.UserId, "IX_ConsultAudit_UserId");

                entity.Property(e => e.At).HasColumnType("smalldatetime");

                entity.Property(e => e.EntityId).HasComment("ConsultId / CustomerId");

                entity.Property(e => e.TypeCode).HasComment("[75] 감사 유형");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Audits)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Audit_User");
            });

            modelBuilder.Entity<CallHistory>(entity =>
            {
                entity.ToTable("CallHistory");

                entity.HasComment("다이렉트 콜 발신 내역");

                entity.HasIndex(e => e.UserId, "IX_UserId");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SentAt).HasColumnType("datetime");

                entity.Property(e => e.SentTo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeCode).HasComment("[68] 콜 타입");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CallHistories)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Call_User");
            });

            modelBuilder.Entity<Center>(entity =>
            {
                entity.ToTable("Center");

                entity.Property(e => e.CenterId).ValueGeneratedNever();

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Chief)
                    .WithMany(p => p.Centers)
                    .HasForeignKey(d => d.ChiefId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Center_User");
            });

            modelBuilder.Entity<CenterDepartment>(entity =>
            {
                entity.HasKey(e => new { e.CenterId, e.DepartmentId });

                entity.ToTable("CenterDepartment");

                entity.HasOne(d => d.Center)
                    .WithMany(p => p.CenterDepartments)
                    .HasForeignKey(d => d.CenterId)
                    .HasConstraintName("FK_CenterDepartment_Center");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.CenterDepartments)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_CenterDepartment_Department");
            });

            modelBuilder.Entity<Chat>(entity =>
            {
                entity.ToTable("Chat");

                entity.HasIndex(e => e.ConsultId, "IX_Chat_ConsultId");

                entity.Property(e => e.ChatAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("파일명 (이미지면 이미지 크기)");

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.ChatByNavigation)
                    .WithMany(p => p.ChatChatByNavigations)
                    .HasForeignKey(d => d.ChatBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chat_User");

                entity.HasOne(d => d.ChatToNavigation)
                    .WithMany(p => p.ChatChatToNavigations)
                    .HasForeignKey(d => d.ChatTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chat_User1");

                entity.HasOne(d => d.Consult)
                    .WithMany(p => p.Chats)
                    .HasForeignKey(d => d.ConsultId)
                    .HasConstraintName("FK_Chat_Consult");
            });

            modelBuilder.Entity<Code>(entity =>
            {
                entity.ToTable("Code");

                entity.HasComment("코드");

                entity.Property(e => e.CodeId)
                    .ValueGeneratedNever()
                    .HasComment("코드 아이디");

                entity.Property(e => e.CodeCategoryId).HasComment("코드 카테고리 아이디");

                entity.Property(e => e.Enabled).HasComment("시스템 코드");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("비고");

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("텍스트");

                entity.HasOne(d => d.CodeCategory)
                    .WithMany(p => p.Codes)
                    .HasForeignKey(d => d.CodeCategoryId)
                    .HasConstraintName("FK_Code_CodeCategory");
            });

            modelBuilder.Entity<CodeCategory>(entity =>
            {
                entity.ToTable("CodeCategory");

                entity.HasComment("코드 카테고리");

                entity.Property(e => e.CodeCategoryId)
                    .ValueGeneratedNever()
                    .HasComment("코드 카테고리 아이디");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("비고");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("카테고리 이름");
            });

            modelBuilder.Entity<CodeEx>(entity =>
            {
                entity.HasKey(e => e.CodeId);

                entity.ToTable("CodeEx");

                entity.Property(e => e.CodeId)
                    .ValueGeneratedNever()
                    .HasComment("코드 아이디");

                entity.Property(e => e.AdditionalInfo)
                    .IsRequired()
                    .HasDefaultValueSql("(N'')")
                    .HasComment("부가 정보");

                entity.HasOne(d => d.Code)
                    .WithOne(p => p.CodeEx)
                    .HasForeignKey<CodeEx>(d => d.CodeId)
                    .HasConstraintName("FK_CodeEx_Code");
            });

            modelBuilder.Entity<ColumnInfo>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.ColumnName });

                entity.ToTable("ColumnInfo");

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.Property(e => e.ColumnName).HasMaxLength(50);

                entity.Property(e => e.Memo)
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Consult>(entity =>
            {
                entity.ToTable("Consult");

                entity.HasIndex(e => e.CustomerId, "IX_CustomerId");

                entity.Property(e => e.ClosedOn)
                    .HasColumnType("smalldatetime")
                    .HasComment("종결일");

                entity.Property(e => e.Duplicated).HasComment("중복된 상담. 삭제해야 함");

                entity.Property(e => e.ForNecessity)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("필요자금");

                entity.Property(e => e.ForTransfer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("대환");

                entity.Property(e => e.HasCard).HasComment("카드");

                entity.Property(e => e.HasHoipabok).HasComment("회파복");

                entity.Property(e => e.HasInsurance).HasComment("보험");

                entity.Property(e => e.History)
                    .IsRequired()
                    .HasDefaultValueSql("('')")
                    .HasComment("고객정보 아카이브");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("");

                entity.Property(e => e.NiceScore).HasComment("NICE 신용평가 점수");

                entity.Property(e => e.RegisteredOn)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Consults)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Consult_Customer");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.Consults)
                    .HasForeignKey(d => d.ModifiedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Consult_User");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customer");

                entity.HasComment("상담");

                entity.HasIndex(e => e.Name, "IX_Consult_Name");

                entity.HasIndex(e => e.NextContactDate, "IX_Consult_NextContactDate");

                entity.HasIndex(e => e.Telephone, "IX_Consult_Telephone");

                entity.HasIndex(e => e.CustomerId, "IX_Customer_CustomerId");

                entity.Property(e => e.AdditionalCode).HasComment("[74] 업무 유형 [58] 처리상태");

                entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustomerGradeCode).HasComment("[59] 고객 등급");

                entity.Property(e => e.GenderCode).HasComment("[35] 성별");

                entity.Property(e => e.LogTypeCode).HasComment("[82] 고객 로그 타입");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NextContactDate)
                    .HasColumnType("smalldatetime")
                    .HasComment("배정 예정일");

                entity.Property(e => e.OwnerId).HasComment("전담 상담사");

                entity.Property(e => e.PhoneCompanyCode).HasComment("[40] 통신사");

                entity.Property(e => e.RegisteredOn).HasColumnType("smalldatetime");

                entity.Property(e => e.Telephone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("유니크한 값");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.CustomerModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Customer_User");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.CustomerOwners)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("FK_Customer_User1");
            });

            modelBuilder.Entity<CustomerFile>(entity =>
            {
                entity.ToTable("CustomerFile");

                entity.HasComment("고객 첨부 파일");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("파일명 (이미지면 이미지 크기)");

                entity.Property(e => e.UploadedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerFiles)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_CustomerFile_Customer");

                entity.HasOne(d => d.UploadedByNavigation)
                    .WithMany(p => p.CustomerFiles)
                    .HasForeignKey(d => d.UploadedBy)
                    .HasConstraintName("FK_CustomerFile_User");
            });

            modelBuilder.Entity<CustomerHiddenness>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.UserId });

                entity.ToTable("CustomerHiddenness");

                entity.Property(e => e.Dummy).HasComment("");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerHiddennesses)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_CustomerHiddenness_Customer");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CustomerHiddennesses)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CustomerHiddenness_User");
            });

            modelBuilder.Entity<CustomerMemo>(entity =>
            {
                entity.ToTable("CustomerMemo");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')")
                    .HasComment("특이사항");

                entity.Property(e => e.RegisteredAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("등록일");

                entity.Property(e => e.TypeCode)
                    .HasDefaultValueSql("((830000))")
                    .HasComment("[83] 고객 메모 타입");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerMemos)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_CustomerMemo_Customer");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CustomerMemos)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerMemo_User");
            });

            modelBuilder.Entity<CustomerMigration>(entity =>
            {
                entity.HasKey(e => e.CustomerId)
                    .HasName("PK_ConsultMigration");

                entity.ToTable("CustomerMigration");

                entity.Property(e => e.CustomerId).ValueGeneratedNever();

                entity.Property(e => e.LineInSheet).HasComment("구글시트에서의 라인");

                entity.Property(e => e.SheetName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("구글시트");

                entity.Property(e => e.SpreadName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("구글파일");

                entity.HasOne(d => d.Customer)
                    .WithOne(p => p.CustomerMigration)
                    .HasForeignKey<CustomerMigration>(d => d.CustomerId)
                    .HasConstraintName("FK_CustomerMigration_Customer");
            });

            modelBuilder.Entity<CustomerPass>(entity =>
            {
                entity.ToTable("CustomerPass");

                entity.HasComment("고객 위임");

                entity.HasIndex(e => e.CustomerId, "IX_CustomerPass_CustomerId");

                entity.Property(e => e.PassedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PassedFrom).HasComment("");

                entity.Property(e => e.PassedTo).HasComment("");

                entity.Property(e => e.TypeCode)
                    .HasDefaultValueSql("((810000))")
                    .HasComment("[81] 연계 유형");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerPasses)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_CustomerPass_Customer");

                entity.HasOne(d => d.PassedFromNavigation)
                    .WithMany(p => p.CustomerPassPassedFromNavigations)
                    .HasForeignKey(d => d.PassedFrom)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerPass_User");

                entity.HasOne(d => d.PassedToNavigation)
                    .WithMany(p => p.CustomerPassPassedToNavigations)
                    .HasForeignKey(d => d.PassedTo)
                    .HasConstraintName("FK_CustomerPass_User1");
            });

            modelBuilder.Entity<CustomerPermission>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.UserId });

                entity.ToTable("CustomerPermission");

                entity.Property(e => e.ExpireDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RegisteredOn)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerPermissions)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_CustomerPermission_Customer");

                entity.HasOne(d => d.RegisteredByNavigation)
                    .WithMany(p => p.CustomerPermissionRegisteredByNavigations)
                    .HasForeignKey(d => d.RegisteredBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerPermission_User1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CustomerPermissionUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CustomerPermission_User");
            });

            modelBuilder.Entity<CustomerTag>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.UserId, e.TagCode })
                    .HasName("PK_ConsultTag");

                entity.ToTable("CustomerTag");

                entity.HasIndex(e => e.CustomerId, "IX_ConsultTag_ConsultId");

                entity.HasIndex(e => e.UserId, "IX_ConsultTag_UserId");

                entity.Property(e => e.TagCode).HasComment("[78] 고객 태그");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerTags)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_CustomerTag_Customer");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CustomerTags)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ConsultTag_User");
            });

            modelBuilder.Entity<DaemonJob>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.Name });

                entity.ToTable("DaemonJob");

                entity.Property(e => e.Date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FinishedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.StartedAt).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<Debt>(entity =>
            {
                entity.ToTable("Debt");

                entity.HasIndex(e => e.ConsultId, "IX_Debt_ConsultId");

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("금융사");

                entity.Property(e => e.ExpiredOn)
                    .HasColumnType("smalldatetime")
                    .HasComment("만기일 (NICE)");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MonthlyPayment).HasComment("월 상환액");

                entity.Property(e => e.OpenedOn)
                    .HasColumnType("smalldatetime")
                    .HasComment("개설일 (NICE)");

                entity.Property(e => e.Principal).HasComment("대출 원금");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(9, 4)")
                    .HasComment("금리");

                entity.Property(e => e.Remained).HasComment("기대출 잔액");

                entity.Property(e => e.RepaymentPeriod).HasComment("상환 기간(월)");

                entity.Property(e => e.TypeCode).HasComment("[73] 대출 유형");

                entity.HasOne(d => d.Consult)
                    .WithMany(p => p.Debts)
                    .HasForeignKey(d => d.ConsultId)
                    .HasConstraintName("FK_Debt_Consult");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.ToTable("Department");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.Departments)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("FK_Team_Member");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Department_Department");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.ToTable("Document");

                entity.HasIndex(e => e.FolderId, "IX_FolderId")
                    .HasFillFactor(90);

                entity.Property(e => e.Extension)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.EditingByNavigation)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.EditingBy)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Document_User");

                entity.HasOne(d => d.Folder)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.FolderId)
                    .HasConstraintName("FK_Document_Folder");
            });

            modelBuilder.Entity<DocumentVersion>(entity =>
            {
                entity.HasKey(e => new { e.DocumentId, e.Version });

                entity.ToTable("DocumentVersion");

                entity.Property(e => e.Length).HasComment("");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UploadedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.DocumentVersions)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_DocumentVersion_Document");

                entity.HasOne(d => d.UploadedByNavigation)
                    .WithMany(p => p.DocumentVersions)
                    .HasForeignKey(d => d.UploadedBy)
                    .HasConstraintName("FK_DocumentVersion_User");
            });

            modelBuilder.Entity<EntityLog>(entity =>
            {
                entity.HasKey(e => new { e.KeyValue, e.At, e.EntityName })
                    .HasName("PK_EntityLog_1");

                entity.ToTable("EntityLog");

                entity.Property(e => e.KeyValue)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("PK 값 (; 으로 구분)");

                entity.Property(e => e.At)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("기록일시");

                entity.Property(e => e.EntityName)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("엔터티 이름");

                entity.Property(e => e.ActionCode).HasComment("작업 코드 (13)");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasDefaultValueSql("(N'')")
                    .HasComment("내역");

                entity.Property(e => e.UserId).HasComment("유저 아이디");
            });

            modelBuilder.Entity<Favorate>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.CustomerId });

                entity.ToTable("Favorate");

                entity.Property(e => e.RegisteredAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Favorates)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Favorate_Customer");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Favorates)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Favorate_User");
            });

            modelBuilder.Entity<Folder>(entity =>
            {
                entity.ToTable("Folder");

                entity.HasIndex(e => e.ParentId, "IX_ParentId")
                    .HasFillFactor(90);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SortOrder)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Folder_Folder");
            });

            modelBuilder.Entity<GenericLog>(entity =>
            {
                entity.ToTable("GenericLog");

                entity.HasComment("범용 로그");

                entity.Property(e => e.GenericLogId).HasComment("범용 로그 아이디");

                entity.Property(e => e.At)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("로그 발생 시각");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("로그 메시지");

                entity.Property(e => e.StackTrace)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.UserId).HasComment("사용자 아이디");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("사용자 이름");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.GenericLogs)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_GenericLog_Member");
            });

            modelBuilder.Entity<Holiday>(entity =>
            {
                entity.HasKey(e => e.Date);

                entity.ToTable("Holiday");

                entity.HasComment("토/일/양력 공휴일을 제외한 휴일");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Home>(entity =>
            {
                entity.ToTable("Home");

                entity.HasIndex(e => e.ConsultId, "IX_Home_ConsultId");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuildingTypeCode).HasComment("[39] 주택 종류");

                entity.Property(e => e.CollateralCode).HasComment("[24] 담보");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OwnershipCode).HasComment("[38] 주택 소유");

                entity.Property(e => e.ResidenceCode).HasComment("[48] 거주");

                entity.HasOne(d => d.Consult)
                    .WithMany(p => p.Homes)
                    .HasForeignKey(d => d.ConsultId)
                    .HasConstraintName("FK_Home_Consult");
            });

            modelBuilder.Entity<Income>(entity =>
            {
                entity.ToTable("Income");

                entity.HasIndex(e => e.ConsultId, "IX_Income_ConsultId");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyTypeCode).HasComment("[44] 기업유형");

                entity.Property(e => e.EmploymentTypeCode).HasComment("[45] 고용형태");

                entity.Property(e => e.IncomeAmount).HasComment("소득금액");

                entity.Property(e => e.IncomeProofTypeCode).HasComment("[53] 소득증빙유형");

                entity.Property(e => e.JobTypeCode).HasComment("[70] 직업유형");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasComment("입사일,개업일");

                entity.HasOne(d => d.Consult)
                    .WithMany(p => p.Incomes)
                    .HasForeignKey(d => d.ConsultId)
                    .HasConstraintName("FK_Income_Consult");
            });

            modelBuilder.Entity<Memo>(entity =>
            {
                entity.ToTable("Memo");

                entity.HasIndex(e => e.ReceiverId, "IX_ReceiverId");

                entity.HasIndex(e => e.SenderId, "IX_SenderId");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("파일명 (이미지면 이미지 크기)");

                entity.Property(e => e.ReadAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SentAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeCode).HasComment("[12] 쪽지 유형");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Memos)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Memo_Customer");

                entity.HasOne(d => d.Sender)
                    .WithMany(p => p.Memos)
                    .HasForeignKey(d => d.SenderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Memo_SenderId");
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.ToTable("Menu");

                entity.Property(e => e.MenuId)
                    .ValueGeneratedNever()
                    .HasComment("메뉴 아이디");

                entity.Property(e => e.FormArgument)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("폼 실행 매개변수");

                entity.Property(e => e.FormClassName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("폼 클래스 이름");

                entity.Property(e => e.FormTypeCode).HasComment("폼 실행 타입 (9)");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasDefaultValueSql("(N'')")
                    .HasComment("설명");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("화면 표시 텍스트");

                entity.Property(e => e.ParentId)
                    .HasDefaultValueSql("((1))")
                    .HasComment("메뉴 컨테이너 아이디");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Menu_Menu");
            });

            modelBuilder.Entity<OnlineRequest>(entity =>
            {
                entity.ToTable("OnlineRequest");

                entity.HasIndex(e => e.Telephone, "IX_Telephone")
                    .HasFillFactor(90);

                entity.Property(e => e.OnlineRequestId).ValueGeneratedNever();

                entity.Property(e => e.AdCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("광고 코드");

                entity.Property(e => e.AllocatedAt)
                    .HasColumnType("smalldatetime")
                    .HasComment("할당받은 시각");

                entity.Property(e => e.AllocatedTo).HasComment("할당받은 CM");

                entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CardInfo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Event)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("이벤트");

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.HouseInfo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Job)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Origin)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("유입경로");

                entity.Property(e => e.ProcessedAt)
                    .HasColumnType("smalldatetime")
                    .HasComment("CM 처리일시");

                entity.Property(e => e.RequestedAt).HasColumnType("datetime");

                entity.Property(e => e.SafeKey)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StatusCode).HasComment("[62] 온라인 신청 처리상태");

                entity.Property(e => e.Telephone)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.VehicleInfo)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.AllocatedToNavigation)
                    .WithMany(p => p.OnlineRequests)
                    .HasForeignKey(d => d.AllocatedTo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OnlineRequest_User");
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.EntityId, e.PermissionTypeCode });

                entity.ToTable("Permission");

                entity.HasComment("퍼미션");

                entity.Property(e => e.RoleId).HasComment("역할 아이디");

                entity.Property(e => e.EntityId).HasComment("엔터티 아이디");

                entity.Property(e => e.PermissionTypeCode).HasComment("퍼미션 타입");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_Permission_Role");
            });

            modelBuilder.Entity<ProductProgress>(entity =>
            {
                entity.ToTable("ProductProgress");

                entity.HasIndex(e => e.ConsultId, "IX_ProductProgress_ConsultId");

                entity.Property(e => e.GradeCode).HasComment("[77] 등급 코드");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Money).HasComment("금액");

                entity.Property(e => e.ProcessedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("처리일시");

                entity.Property(e => e.ProductCode).HasComment("[21] 대출상품코드");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(9, 4)")
                    .HasComment("금리");

                entity.Property(e => e.RepaymentPeriod).HasComment("상환기간");

                entity.Property(e => e.StatusCode).HasComment("[56] 금융사 처리상태");

                entity.HasOne(d => d.Consult)
                    .WithMany(p => p.ProductProgresses)
                    .HasForeignKey(d => d.ConsultId)
                    .HasConstraintName("FK_LoanerStep_Consult");

                entity.HasOne(d => d.ModifiedByNavigation)
                    .WithMany(p => p.ProductProgresses)
                    .HasForeignKey(d => d.ModifiedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LoanerStep_User");
            });

            modelBuilder.Entity<PushCallRecording>(entity =>
            {
                entity.ToTable("PushCallRecording");

                entity.HasComment("푸시콜 녹음 파일 샷");

                entity.Property(e => e.FileCount).HasComment("당일 업로드한 파일 갯수");

                entity.Property(e => e.LatestTime)
                    .HasColumnType("datetime")
                    .HasComment("마지막 녹음 파일의 생성 시각");

                entity.Property(e => e.TakenAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("샷을 찍은 일시");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PushCallRecordings)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_PushCallRecording_User");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("Role");

                entity.Property(e => e.RoleId)
                    .ValueGeneratedNever()
                    .HasComment("역할 아이디");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasDefaultValueSql("(N'')")
                    .HasComment("메모");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("역할 이름");
            });

            modelBuilder.Entity<ServerSetting>(entity =>
            {
                entity.ToTable("ServerSetting");

                entity.HasComment("서버 설정");

                entity.Property(e => e.ServerSettingId).HasComment("회사(클라이언트) 아이디");

                entity.Property(e => e.AssignmentDailyQuota)
                    .HasDefaultValueSql("((150))")
                    .HasComment("배정 일일 쿼터");

                entity.Property(e => e.AssignmentMaxHolding)
                    .HasDefaultValueSql("((5))")
                    .HasComment("배정을 뽑을 수 있는 최대 잔존 수량");

                entity.Property(e => e.AssignmentPerPick)
                    .HasDefaultValueSql("((10))")
                    .HasComment("한번에 뽑는 배정 갯수");

                entity.Property(e => e.ChatCheckInterval)
                    .HasDefaultValueSql("((1))")
                    .HasComment("챗 갱신 주기(분)");

                entity.Property(e => e.MemoCheckInterval)
                    .HasDefaultValueSql("((1))")
                    .HasComment("쪽지 갱신 주기(분)");
            });

            modelBuilder.Entity<Storage>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.SubEntityId, e.TypeCode });

                entity.ToTable("Storage");

                entity.Property(e => e.TypeCode).HasComment("[11] 첨부 파일 타입");
            });

            modelBuilder.Entity<Support>(entity =>
            {
                entity.HasKey(e => new { e.SupporterId, e.SupporteeId, e.TypeCode })
                    .HasName("PK_Support_1");

                entity.ToTable("Support");

                entity.Property(e => e.SupporterId).HasComment("지원하는 스탭");

                entity.Property(e => e.SupporteeId).HasComment("지원받는 CM");

                entity.Property(e => e.TypeCode)
                    .HasDefaultValueSql("((790000))")
                    .HasComment("[79] 지원 유형");

                entity.HasOne(d => d.Supporter)
                    .WithMany(p => p.Supports)
                    .HasForeignKey(d => d.SupporterId)
                    .HasConstraintName("FK_Support_User1");
            });

            modelBuilder.Entity<Timer>(entity =>
            {
                entity.ToTable("Timer");

                entity.HasIndex(e => e.CustomerId, "IX_Timer_ConsultId");

                entity.Property(e => e.ConfirmedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ScheduledAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Timers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Timer_Customer");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Timers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Timer_User");
            });

            modelBuilder.Entity<UsbKeyLog>(entity =>
            {
                entity.HasKey(e => new { e.CodeId, e.CheckedAt });

                entity.ToTable("UsbKeyLog");

                entity.Property(e => e.CheckedAt).HasColumnType("smalldatetime");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UsbKeyLogs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsbKeyLog_User");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .IsClustered(false);

                entity.ToTable("User");

                entity.Property(e => e.AlarmTalkDivisionId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Birthday)
                    .HasColumnType("date")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BusinessHandphone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.BusinessPhoneCompanyCode).HasComment("[69] 업무폰 통신사");

                entity.Property(e => e.CenterId).HasDefaultValueSql("((1))");

                entity.Property(e => e.DailyAssignmentQuota)
                    .HasDefaultValueSql("((150))")
                    .HasComment("최대로 배정받을 수 고객수");

                entity.Property(e => e.DailyPassQuota)
                    .HasDefaultValueSql("((150))")
                    .HasComment("최대로 이관받을 수 상담수");

                entity.Property(e => e.DayIn)
                    .HasColumnType("date")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DayOut)
                    .HasColumnType("date")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FcmToken)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.GivenRestDay)
                    .HasColumnType("numeric(9, 1)")
                    .HasComment("발생 연차");

                entity.Property(e => e.GradeCode).HasComment("[36] 사용자 유형");

                entity.Property(e => e.Handphone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KakaoSyncKey)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.LastLoggedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.LastPassedAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900-1-1')")
                    .HasComment("마지막으로 주니어 상담사로부터 이관 받은 일시");

                entity.Property(e => e.LeftRestDay)
                    .HasColumnType("numeric(9, 1)")
                    .HasComment("잔여 연차");

                entity.Property(e => e.LessGradeOnly).HasComment("B 등급 고객만 배정받음");

                entity.Property(e => e.LoginId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('1111')");

                entity.Property(e => e.Sip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SyncKey)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.TakenRestDay)
                    .HasColumnType("numeric(9, 1)")
                    .HasComment("사용한 연차 수 (2021년에만 사용)");

                entity.HasOne(d => d.Center)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.CenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Center");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Member_Team");
            });

            modelBuilder.Entity<UserEx>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("UserEx");

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.IP)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("");

                entity.Property(e => e.MacAddress)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("");

                entity.Property(e => e.OS)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("");

                entity.Property(e => e.RunningProcesses)
                    .IsRequired()
                    .HasDefaultValueSql("('')")
                    .HasComment("");

                entity.Property(e => e.UpgradableChecketAt)
                    .HasColumnType("smalldatetime")
                    .HasComment("HopeCore 업그레이드 가능");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.UserEx)
                    .HasForeignKey<UserEx>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserEx_User");
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.UserId });

                entity.ToTable("UserRole");

                entity.Property(e => e.RoleId).HasComment("역할 아이디");

                entity.Property(e => e.UserId).HasComment("사용자 아이디");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_UserRole_Role");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_MemberRole_Member");
            });

            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.ToTable("Vehicle");

                entity.HasIndex(e => e.ConsultId, "IX_Vehicle_ConsultId");

                entity.Property(e => e.CapitalLoanCode).HasComment("[31] 차량할부형태");

                entity.Property(e => e.CarOwnTypeCode).HasComment("[71] 차량소유형태");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReleasedYear).HasComment("차량연식");

                entity.HasOne(d => d.Consult)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.ConsultId)
                    .HasConstraintName("FK_Vehicle_Consult");
            });

            modelBuilder.Entity<Work>(entity =>
            {
                entity.ToTable("Work");

                entity.HasComment("업무");

                entity.HasIndex(e => e.ConsultId, "IX_Work_ConsultId");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RegisteredAt).HasColumnType("datetime");

                entity.Property(e => e.TypeCode).HasComment("[74] 업무 유형");

                entity.HasOne(d => d.Consult)
                    .WithMany(p => p.Works)
                    .HasForeignKey(d => d.ConsultId)
                    .HasConstraintName("FK_Work_Consult");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Works)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Work_User");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}